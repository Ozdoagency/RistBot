import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import bodyParser from 'body-parser';
import winston from 'winston';
import { Client } from '@gradio/client';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª config.json)
const config = {
  TELEGRAM_TOKEN: process.env.TELEGRAM_TOKEN || '7733244277:AAFa1YylutZKqaEw0LjBTDRKxZymWz91LPs',
  WEBHOOK_URL: process.env.WEBHOOK_URL || 'https://ristbot.onrender.com',
  GRADIO_SPACE: process.env.GRADIO_SPACE || 'Ozdo/Qwen-Qwen2.5-Coder-32B-Instruct',
  MAX_TELEGRAM_MESSAGE_LENGTH: 4096,
  ADMIN_ID: process.env.ADMIN_ID || null,
  REQUEST_LIMIT: 5,
  REQUEST_WINDOW: 60000,
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Winston –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}]: ${message}`)
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs.log', maxsize: 5 * 1024 * 1024, maxFiles: 5 }),
  ],
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
const bot = new TelegramBot(config.TELEGRAM_TOKEN);
bot.setWebHook(`${config.WEBHOOK_URL}/bot${config.TELEGRAM_TOKEN}`);

// –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userHistories = {};
const userRequestTimestamps = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gradio API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤
async function sendToGradio(message, chatId) {
  const now = Date.now();
  const timestampData = userRequestTimestamps[chatId] || { count: 0, timestamp: 0 };
  const requestCount = timestampData.count;

  if (now - timestampData.timestamp < config.REQUEST_WINDOW && requestCount >= config.REQUEST_LIMIT) {
    const remainingTime = Math.ceil((config.REQUEST_WINDOW - (now - timestampData.timestamp)) / 1000);
    throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥.`);
  }

  try {
    logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gradio API –æ—Ç chatId ${chatId}: "${message}"`);
    const client = await Client.connect(config.GRADIO_SPACE);

    try {
      const testResponse = await client.predict('/test');
      if (!testResponse.success) {
        throw new Error('Gradio API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
      }
    } catch (testError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gradio: ${testError.message}`);
    }

    const result = await client.predict('/chat', { message, max_tokens: 200, temperature: 0.7, top_p: 0.9 });
    const response = result.data || '';
    logger.info(`–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gradio API –¥–ª—è chatId ${chatId}: "${response}"`);
    userRequestTimestamps[chatId] = { count: requestCount + 1, timestamp: now };
    return response;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ Gradio API –¥–ª—è chatId ${chatId}: ${errorMessage}`);
    if (config.ADMIN_ID) {
      bot.sendMessage(config.ADMIN_ID, `–û—à–∏–±–∫–∞ Gradio API: ${errorMessage} (chatId: ${chatId})`);
    }
    throw new Error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${errorMessage}`);
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gradio API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
function formatGradioResponse(response) {
  if (typeof response === 'string') {
    const cleanedResponse = response.replace(/<\|.*?\|>/g, '').trim();
    return cleanedResponse || '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.';
  } else if (typeof response === 'object' && response !== null) {
    try {
      const jsonString = JSON.stringify(response, null, 2);
      const trimmedJson = jsonString.length > config.MAX_TELEGRAM_MESSAGE_LENGTH ?
                         `${jsonString.substring(0, config.MAX_TELEGRAM_MESSAGE_LENGTH - 3)}...` :
                         jsonString;
      return trimmedJson;
    } catch (jsonError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ Gradio –≤ JSON: ${jsonError.message}`);
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.';
    }
  } else {
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.';
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã
async function sendMessage(chatId, text) {
  if (!text || text.trim() === '') return;
  const trimmedText =
    text.length > config.MAX_TELEGRAM_MESSAGE_LENGTH
      ? `${text.substring(0, config.MAX_TELEGRAM_MESSAGE_LENGTH - 3)}...`
      : text;
  return bot.sendMessage(chatId, trimmedText);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userHistories[chatId] = [];
  userRequestTimestamps[chatId] = { count: 0, timestamp: 0 };
  const firstName = msg.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const welcomeMessage = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É "Rist". –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! ` +
    '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤. ' +
    '–ö–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π? üéØ';
  logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId: ${chatId}`);
  bot.sendMessage(chatId, welcomeMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  if (userMessage.startsWith('/')) return;
  const firstName = msg.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  try {
    userHistories[chatId] = userHistories[chatId] || [];
    logger.info(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chatId ${chatId}: "${userMessage}"`);
    userHistories[chatId].push({ user: userMessage });

    const botReply = await sendToGradio(userMessage, chatId);
    const formattedReply = formatGradioResponse(botReply);
    await sendMessage(chatId, formattedReply);
    logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è chatId ${chatId}: "${formattedReply}"`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç chatId ${chatId}: ${error.message}`);
    await sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, ${firstName}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
  }
});

// Express-—Å–µ—Ä–≤–µ—Ä
const app = express();
app.use(bodyParser.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook
app.post(`/bot${config.TELEGRAM_TOKEN}`, (req, res) => {
  logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram');
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: ${error.message}`);
    res.sendStatus(500);
    if (config.ADMIN_ID) {
      bot.sendMessage(config.ADMIN_ID, `–û—à–∏–±–∫–∞ Webhook: ${error.message}`);
    }
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  logger.info('–ó–∞–ø—Ä–æ—Å –Ω–∞ /');
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(process.env.PORT || 3000, () => {
  logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3000}`);
});

