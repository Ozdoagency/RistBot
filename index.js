// –ò–º–ø–æ—Ä—Ç—ã
import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import bodyParser from 'body-parser';
import winston from 'winston';
import { GoogleGenerativeAI } from "@google/generative-ai";

import basePrompt from './prompts/basePrompt.js';
import dialogStages from './prompts/dialogStages.js';
import generalQuestions from './prompts/generalQuestions.js';
import objectionHandling from './prompts/objectionHandling.js';
import pricing from './prompts/pricing.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  TELEGRAM_TOKEN: process.env.TELEGRAM_TOKEN || '–í–∞—à_Telegram_Token',
  WEBHOOK_URL: process.env.WEBHOOK_URL || '–í–∞—à_Webhook_Url',
  GEMINI_API_KEY: process.env.GEMINI_API_KEY || '–í–∞—à_Gemini_API_Key',
  GEMINI_API_URL: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',
  MAX_TELEGRAM_MESSAGE_LENGTH: 4096,
  ADMIN_ID: process.env.ADMIN_ID || null,
  REQUEST_LIMIT: 5,
  REQUEST_WINDOW: 60000,
  PORT: process.env.PORT || 3000,
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GoogleGenerativeAI
const genAI = new GoogleGenerativeAI(config.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
const bot = new TelegramBot(config.TELEGRAM_TOKEN);
bot.setWebHook(`${config.WEBHOOK_URL}/bot${config.TELEGRAM_TOKEN}`);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Winston
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}]: ${message}`)
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs.log', maxsize: 5 * 1024 * 1024, maxFiles: 5 }),
  ],
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const userHistories = {};
const userRequestTimestamps = {};
let userStages = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// **–§—É–Ω–∫—Ü–∏—è sendToGemini**
async function sendToGemini(prompt, chatId) {
  try {
    logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API –æ—Ç chatId ${chatId}: "${prompt}"`);
    const result = await model.generateContent(prompt);

    logger.info(`–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API –¥–ª—è chatId ${chatId}: ${JSON.stringify(result)}`);

    if (result.response && result.response.candidates && result.response.candidates.length > 0) {
      const reply = result.response.candidates[0].content.parts[0].text || '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
      logger.info(`–û—Ç–≤–µ—Ç –æ—Ç Gemini API –¥–ª—è chatId ${chatId}: "${reply}"`);
      return reply;
    } else {
      logger.warn(`Gemini API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è chatId ${chatId}.`);
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. Gemini API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç.';
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ Gemini API –¥–ª—è chatId ${chatId}: ${error.message}`);
    throw new Error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
}

// **–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π**
async function sendMessage(chatId, text) {
  if (!text || text.trim() === '') return;

  const MAX_LENGTH = config.MAX_TELEGRAM_MESSAGE_LENGTH;
  const messages = [];

  for (let i = 0; i < text.length; i += MAX_LENGTH) {
    messages.push(text.substring(i, i + MAX_LENGTH));
  }

  for (const message of messages) {
    await bot.sendMessage(chatId, message);
  }
}

// **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start**
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  userHistories[chatId] = [];
  userRequestTimestamps[chatId] = { count: 0, timestamp: 0 };
  userStages[chatId] = 0;

  const firstName = msg.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const welcomeMessage = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É "Rist". –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!`;

  logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId: ${chatId}`);
  await sendMessage(chatId, welcomeMessage);

  const firstStage = dialogStages.questions[userStages[chatId]];
  await sendMessage(chatId, firstStage.text);
});

// **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (userMessage.startsWith('/')) return;

  try {
    if (userStages[chatId] === undefined) {
      userStages[chatId] = 0; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
    }

    const currentStage = dialogStages.questions[userStages[chatId]];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (currentStage.validation && !currentStage.validation(userMessage)) {
      await sendMessage(chatId, currentStage.errorText || '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userHistories[chatId] = userHistories[chatId] || [];
    userHistories[chatId].push({ stage: currentStage.stage, response: userMessage });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini
    const combinedPrompt = `${basePrompt}\n${currentStage.text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userMessage}`;
    const botReply = await sendToGemini(combinedPrompt, chatId);
    await sendMessage(chatId, botReply);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    userStages[chatId]++;
    if (userStages[chatId] < dialogStages.questions.length) {
      const nextStage = dialogStages.questions[userStages[chatId]];
      await sendMessage(chatId, nextStage.text);
    } else {
      delete userStages[chatId];
      await sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ!");
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç chatId ${chatId}: ${error.message}`);
    await sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
  }
});

// **Express-—Å–µ—Ä–≤–µ—Ä**
const app = express();
app.use(bodyParser.json());

app.post(`/bot${config.TELEGRAM_TOKEN}`, (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ Webhook: ${error.message}`);
    res.sendStatus(500);
  }
});

app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

app.listen(config.PORT, () => {
  logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.PORT}`);
});
