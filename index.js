const TelegramBot = require('node-telegram-bot-api');
const { Configuration, OpenAIApi } = require('openai');
const { connectToMongoDB, getDb } = require('./mongodb');
const { sendFollowUps } = require('./followUps');
const express = require('express');
const bodyParser = require('body-parser');
const winston = require('winston');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot.log' }),
  ],
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || "YOUR_TELEGRAM_BOT_TOKEN";
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "YOUR_OPENAI_API_KEY";
const WEBHOOK_URL = process.env.WEBHOOK_URL || "https://your_domain.com";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot –∏ OpenAI
const bot = new TelegramBot(TELEGRAM_TOKEN);
bot.setWebHook(`${WEBHOOK_URL}/bot${TELEGRAM_TOKEN}`);
const configuration = new Configuration({ apiKey: OPENAI_API_KEY });
const openai = new OpenAIApi(configuration);

const lastMessages = {};
const userContext = {};
const userState = {};

const sendMessageWithCheck = async (chatId, message) => {
  if (lastMessages[chatId] === message) {
    logger.info(`Duplicate message detected for chatId ${chatId}, skipping send.`);
    return;
  }

  await bot.sendMessage(chatId, message); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é bot.sendMessage
  lastMessages[chatId] = message;
  logger.info(`Message sent to chatId ${chatId}: ${message}`);
};

// –°–æ–∑–¥–∞–Ω–∏–µ Express-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
  logger.info(`–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: ${JSON.stringify(req.body)}`);
  bot.processUpdate(req.body); // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –±–æ—Ç—É
  res.sendStatus(200); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ GET
app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

app.get('/webhook', (req, res) => {
  res.send('Webhook –æ–∂–∏–¥–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram.');
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  try {
    await connectToMongoDB();
    logger.info("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.");

    // –õ–æ–≥–∏–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`);
    process.exit(1);
  }
})();

const sendSummaryToSecondBot = async (summary) => {
  const SECOND_BOT_TOKEN = "2111920825:AAEi07nuwAG92q4gqrEcnzZJ_WT8dp9-ieA";
  const SECOND_BOT_CHAT_ID = "4522204925"; // –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

  const apiUrl = `https://api.telegram.org/bot${SECOND_BOT_TOKEN}/sendMessage`;

  try {
    const message = `
üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*
1Ô∏è‚É£ *–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è:* ${summary.goal || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
2Ô∏è‚É£ *–ö–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:* ${summary.grade || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
3Ô∏è‚É£ *–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:* ${summary.knowledge || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
4Ô∏è‚É£ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* ${summary.date || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
5Ô∏è‚É£ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* ${summary.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
    `;

    const response = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: SECOND_BOT_CHAT_ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã
        text: message,
        parse_mode: "Markdown",
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${response.status} - ${errorText}`);
    }

    console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!");
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç: ${error.message}`);
  }
};

/// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —ç—Ç–∞–ø–æ–≤ –¥–∏–∞–ª–æ–≥–∞
const askNextQuestion = async (chatId, bot) => {
  const user = userState[chatId] || { stage: 0, data: {} };
  userState[chatId] = user;

  const stages = [
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å –ø–æ–º–æ—â—å—é –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞? –ù–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö, –ø–æ–≤—ã—Å–∏—Ç—å –æ—Ü–µ–Ω–∫–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. üéØ",
    "–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—Ç—Å—è –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫? –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. üìö",
    "–ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ç–µ–º—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏? –ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä–æ–±–∏, –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è? üî¢",
    "–ö–æ–≥–¥–∞ –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–∞? üïí",
    "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ‚òéÔ∏è",
  ];

  try {
    if (user.stage < stages.length) {
      const question = stages[user.stage];
      await sendMessageWithCheck(chatId, question); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
      user.stage += 1; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      logger.info(`–≠—Ç–∞–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è chatId ${chatId}: ${user.stage}`);
    } else {
      const summary = {
        goal: user.data.goal || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        grade: user.data.grade || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        knowledge: user.data.knowledge || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        date: user.data.date || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        phone: user.data.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      };

      logger.info(`–í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è chatId ${chatId}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ.`);
      await sendSummaryToSecondBot(summary);

      await sendMessageWithCheck(chatId, "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.");
      delete userState[chatId]; // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ askNextQuestion –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};


const saveUserMessage = async (chatId, message) => {
  try {
    const db = getDb();
    const collection = db.collection('userMessages');

    if (!chatId || !message) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
    }

    const existingMessage = await collection.findOne({
      userId: chatId,
      "messages.content": message,
    });

    if (existingMessage) {
      logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è chatId ${chatId}: ${message}`);
      return; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    }

    await collection.updateOne(
      { userId: chatId },
      { $push: { messages: { content: message, timestamp: new Date() } } },
      { upsert: true }
    );
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ "${message}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MongoDB –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

app.use(bodyParser.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.post('/webhook', (req, res) => {
  logger.info(`–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: ${JSON.stringify(req.body)}`);
  bot.processUpdate(req.body); // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –±–æ—Ç—É
  res.sendStatus(200); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ GET
app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

app.get('/webhook', (req, res) => {
  res.send('Webhook –æ–∂–∏–¥–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram.');
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  try {
    // –í–∞—à –∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await connectToMongoDB();
    logger.info("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.");

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`);
    process.exit(1);
  }
})();

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ–ª–ª–æ—É-–∞–ø–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
const handleFollowUps = async (chatId) => {
  try {
    const db = getDb();
    const collection = db.collection('userMessages');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const userMessages = await collection.findOne({ userId: chatId });
    const hasPhoneNumber = userMessages?.messages.some((message) =>
      /\+?\d{10,15}/.test(message.content)
    );

    if (!hasPhoneNumber) {
      await sendFollowUps(bot, chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ–ª–ª–æ—É-–∞–ø—ã
      logger.info(`–§–æ–ª–ª–æ—É-–∞–ø—ã –∑–∞–ø—É—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–ª–ª–æ—É-–∞–ø–æ–≤ –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};


// –í–∞—à SYSTEM_PROMPT
const SYSTEM_PROMPT = `# –†–û–õ–¨ –ò –ó–ê–î–ê–ß–ê

–í—ã ‚Äî Sales Assistant –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã "Rist". –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∑–∞–¥–∞–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω —Å —ç–º–æ–¥–∑–∏. üåü

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞. –î–∞–ª–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å—Ä–∞–∑—É –∫ —Å—É—Ç–∏. üëã
2. –ó–∞–≤–µ—Ä—à–∞–π—Ç–µ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. ü§î
3. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å–æ–æ–±—â–∏—Ç–µ, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∑–∂–µ. ‚è∞
4. –¶–µ–ª—å –¥–∏–∞–ª–æ–≥–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —É—Ä–æ–∫–æ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –≤–æ–≤–ª–µ–∫–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏. üó®Ô∏è
6. –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ —Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ) –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º. üí∞
7. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞. üåê


# –≠–¢–ê–ü–´ –î–ò–ê–õ–û–ì–ê

1. **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ**  
*"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É 'Rist'. –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤."*

*"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å –ø–æ–º–æ—â—å—é –∑–∞–Ω—è—Ç–∏–π? –ù–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã, –ø–æ–≤—ã—Å–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º."* üéØ

2. **–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**  
–¶–µ–ª—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ 4 –≤–æ–ø—Ä–æ—Å–∞: —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è, –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞, —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.  

- **–¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è:**  
  "–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞? –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—ã—Å–∏—Ç—å –æ—Ü–µ–Ω–∫–∏, —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º." üéØ

- **–ö–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:**  
  "–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—Ç—Å—è –≤–∞—à —Ä–µ–±—ë–Ω–æ–∫?" üìö

- **–¢–µ–º—ã:**  
  "–° –∫–∞–∫–∏–º–∏ —Ç–µ–º–∞–º–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ —É —Ä–µ–±—ë–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏? –ù–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä–æ–±–∏, –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è?" üî¢

- **–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:**  
  "–ö–æ–≥–¥–∞ –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É —É–¥–æ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏?" üïí  

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è:  
*"–°–ø–∞—Å–∏–±–æ! –°–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏."* ‚òéÔ∏è  

3. **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**  
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:  
*"–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ!"* üåü  

3. **–¶–µ–Ω–∞**

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:  
*"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –ö–∞–∫–æ–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: 10, 20, 60 –∏–ª–∏ 100 –∑–∞–Ω—è—Ç–∏–π? –ò–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ?"* üí∏  

**–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã (–≤ –≥—Ä–∏–≤–Ω–∞—Ö):**  
- 10 –∑–∞–Ω—è—Ç–∏–π: 4700 –≥—Ä–Ω (–ø–æ 470 –≥—Ä–Ω/—É—Ä–æ–∫)  
- 20 –∑–∞–Ω—è—Ç–∏–π: 8000 –≥—Ä–Ω (–ø–æ 400 –≥—Ä–Ω/—É—Ä–æ–∫)  
- 60 –∑–∞–Ω—è—Ç–∏–π: 22620 –≥—Ä–Ω (–ø–æ 377 –≥—Ä–Ω/—É—Ä–æ–∫)  
- 100 –∑–∞–Ω—è—Ç–∏–π: 35200 –≥—Ä–Ω (–ø–æ 352 –≥—Ä–Ω/—É—Ä–æ–∫)  
- –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: 520 –≥—Ä–Ω.  

*"–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏–ª–∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç, –≤–∞–º –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?"* üòä


4. **–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è**

- **"–ú—ã –µ—â–µ –¥—É–º–∞–µ–º"**  
  "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à –ø–æ–¥—Ö–æ–¥. –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –Ω–∞—á–∞—Ç—å?" ü§î

- **"–≠—Ç–æ –¥–æ—Ä–æ–≥–æ"**  
  "–î–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è –≤—ã—Å–æ–∫–æ–π, –Ω–æ —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ —Ä–µ–±—ë–Ω–∫–∞. –ù–∞—á–Ω—ë–º —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?" üéì

- **"–£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä"**  
  "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –º–æ–∂–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —Ä–∞–∑–≤–∏–≤–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–±—ë–Ω–∫–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫?" ‚ú®

- **"–ù–∞–º —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ"**  
  "–ü–æ–Ω–∏–º–∞—é! –ù–æ –¥–≤–∞ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è –ø–æ–º–æ–≥—É—Ç –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–µ–ª—ã. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?" üëç

- **"–£ –Ω–∞—Å –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"**  
  "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–∏–±–∫–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π: —É—Ç—Ä–æ–º, –¥–Ω—ë–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º. –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç —É–¥–æ–±–Ω—ã–º?" üï∞Ô∏è

- **"–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —è —É–≤–∏–∂—É?"**  
  "–ü–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–µ—Ç–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ, –∞ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∑–∞–º–µ—á–∞—é—Ç —É–ª—É—á—à–µ–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?" üéì

- **"–†–µ–±—ë–Ω–∫—É –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"**  
  "–ú—ã –¥–µ–ª–∞–µ–º —É—Ä–æ–∫–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏, –≤–∫–ª—é—á–∞—è –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç?" üòä

- **"–ê –≤–¥—Ä—É–≥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥—ë—Ç –ø–æ–¥—Ö–æ–¥?"**  
  "–£ –Ω–∞—Å –±–æ–ª–µ–µ 70 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∏ –º—ã –ø–æ–¥–±–µ—Ä—ë–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ. –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?" üßë‚Äçüè´

---

5. **–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã**

- **–î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**  
  "–î–∞, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –∏ –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"  

- **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã/–∂–∞–ª–æ–±—ã:**  
  "–ü–µ—Ä–µ–¥–∞–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ. –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."`;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø–µ—á–∞—Ç–∞–Ω–∏—è" (–æ—Ç 3 –¥–æ 6 —Å–µ–∫—É–Ω–¥)
function getThinkingDelay() {
  return Math.floor(Math.random() * (6000 - 3000 + 1)) + 3000; // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ "–ø–µ—á–∞—Ç–∞–Ω–∏–µ–º"
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ "–ø–µ—á–∞—Ç–∞–Ω–∏—è" –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (–¥–æ 20 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º)
function calculateTypingTime(text) {
  const words = text.split(' ').length;
  const baseTime = 3; // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  return Math.min(baseTime + words * 0.7, 20) * 1000; // –°–∫–æ—Ä–æ—Å—Ç—å: 0.7 —Å–µ–∫/—Å–ª–æ–≤–æ, –º–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API
async function generateResponse(userId, userMessage) {
  try {
    if (!userContext[userId]) {
      userContext[userId] = [{ role: "system", content: SYSTEM_PROMPT }];
    }

    userContext[userId].push({ role: "user", content: userMessage });

    const response = await openai.createChatCompletion({
      model: 'gpt-4',
      messages: userContext[userId],
      temperature: 0.7,
      max_tokens: 500,
    });

    const assistantMessage = response.data.choices[0].message.content;
    userContext[userId].push({ role: "assistant", content: assistantMessage });
    return assistantMessage;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ OpenAI API –¥–ª—è userId ${userId}: ${error.message}`);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.";
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const cleanupOldMessages = async (chatId) => {
  try {
    const db = getDb();
    const collection = db.collection('userMessages');
    const cutoffDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥

    if (!chatId) {
      throw new Error('chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }

    await collection.updateOne(
      { userId: chatId },
      { $pull: { messages: { timestamp: { $lt: cutoffDate } } } }
    );
    logger.info(`–°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat?.id;

  if (!chatId) {
    logger.error('chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', JSON.stringify(msg, null, 2));
    return;
  }

  const welcomeMessage =
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É 'Rist'. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è, —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. üòä";

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
      await bot.sendMessage(chatId, welcomeMessage);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userState[chatId] = { stage: 0, data: {} };

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
      await askNextQuestion(chatId, bot);

      logger.info(`–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    }, 4000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 4 —Å–µ–∫—É–Ω–¥—ã
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat?.id;

  if (!chatId) {
    logger.error("chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:", JSON.stringify(msg, null, 2));
    return;
  }

  if (msg.text?.startsWith("/")) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  }

  try {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å
    const user = userState[chatId] || { stage: 0, data: {} };
    userState[chatId] = user;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userMessage = msg.text;
    await saveUserMessage(chatId, userMessage);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
    switch (user.stage) {
      case 0:
        user.data.goal = userMessage;
        break;
      case 1:
        user.data.grade = userMessage;
        break;
      case 2:
        user.data.knowledge = userMessage;
        break;
      case 3:
        user.data.date = userMessage;
        break;
      case 4:
        user.data.phone = userMessage;
        break;
      default:
        logger.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø –¥–ª—è chatId ${chatId}: ${user.stage}`);
        return;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await cleanupOldMessages(chatId);
    logger.info(`–°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ—á–∏—â–µ–Ω—ã.`);

    // –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–Ω–∏—è" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞
    bot.sendChatAction(chatId, "typing");
    await new Promise((resolve) => setTimeout(resolve, getThinkingDelay())); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
    const response = await generateResponse(chatId, userMessage);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ MongoDB
    try {
      const db = getDb();
      const collection = db.collection('userContext');
      userContext[chatId].push({ role: "assistant", content: response });
      await collection.updateOne(
        { userId: chatId },
        { $set: { context: userContext[chatId] } },
        { upsert: true }
      );
      logger.info(`–û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ MongoDB.`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ MongoDB –¥–ª—è chatId ${chatId}: ${error.message}`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º "–ø–µ—á–∞—Ç–∞–Ω–∏—è"
    bot.sendChatAction(chatId, "typing");
    await new Promise((resolve) => setTimeout(resolve, calculateTypingTime(response)));
    await bot.sendMessage(chatId, response);
    logger.info(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: "${response}"`);

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${error.message}`);
    try {
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } catch (sendError) {
      logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è chatId ${chatId}: ${sendError.message}`);
    }
  }
});
