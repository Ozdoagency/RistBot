import TelegramBot from 'node-telegram-bot-api';
import { connectToMongoDB, getDb } from './mongodb.js';
import { sendFollowUps } from './followUps.js';
import express from 'express';
import bodyParser from 'body-parser';
import winston from 'winston';
import fetch from 'node-fetch';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–º–ø—Ç–æ–≤
import basePrompt from './prompts/basePrompt.js';
import dialogStages from './prompts/dialogStages.js';
import pricing from './prompts/pricing.js';
import objectionHandling from './prompts/objectionHandling.js';
import generalQuestions from './prompts/generalQuestions.js';

// –ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
const SYSTEM_PROMPT = `${basePrompt}\n\n${dialogStages}\n\n${pricing}\n\n${objectionHandling}\n\n${generalQuestions}`;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot.log' }),
  ],
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || "7733244277:AAFa1YylutZKqaEw0LjBTDRKxZymWz91LPs";
const WEBHOOK_URL = process.env.WEBHOOK_URL || "https://ristbot.onrender.com";
const HF_ACCESS_TOKEN = process.env.HF_ACCESS_TOKEN || "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";
const HF_MODEL = "DeepPavlov/rubert-base-cased-conversational"; // –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
const HF_API_URL = `https://api-inference.huggingface.co/models/${HF_MODEL}`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
const bot = new TelegramBot(TELEGRAM_TOKEN);
bot.setWebHook(`${WEBHOOK_URL}/bot${TELEGRAM_TOKEN}`);

const lastMessages = {};
const userContext = {};
const userState = {};

// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
function getPrompt(stage, objection) {
  let prompt = basePrompt;

  if (stage !== undefined) {
    prompt += `\n\n–≠—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞: ${dialogStages.questions[stage]}`;
  }

  if (objection !== undefined) {
    prompt += `\n\n–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ: ${objections[objection]}`;
  }

  return prompt;
}

async function sendToHuggingFace(prompt) {
  try {
    const response = await fetch(HF_API_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${HF_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        inputs: prompt,
        parameters: {
          max_length: 150, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
          temperature: 0.7, // –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        },
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ Hugging Face API: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return data.generated_text || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Hugging Face API: ${error.message}`);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.";
  }
}

async function generateResponse(stage, objection) {
  const prompt = getPrompt(stage, objection); // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∞–ø–∞ –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
  const response = await sendToHuggingFace(prompt); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Hugging Face API
  return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
}

const sendMessageWithCheck = async (chatId, message) => {
  if (lastMessages[chatId] === message) {
    logger.info(`Duplicate message detected for chatId ${chatId}, skipping send.`);
    return;
  }

  await bot.sendMessage(chatId, message); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é bot.sendMessage
  lastMessages[chatId] = message;
  logger.info(`Message sent to chatId ${chatId}: ${message}`);
};

// –°–æ–∑–¥–∞–Ω–∏–µ Express-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
  logger.info(`–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: ${JSON.stringify(req.body)}`);
  bot.processUpdate(req.body); // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –±–æ—Ç—É
  res.sendStatus(200); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ GET
app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

app.get('/webhook', (req, res) => {
  res.send('Webhook –æ–∂–∏–¥–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram.');
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  try {
    await connectToMongoDB();
    logger.info("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.");

    // –õ–æ–≥–∏–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`);
    process.exit(1);
  }
})();

const sendSummaryToSecondBot = async (summary) => {
  const SECOND_BOT_TOKEN = "2111920825:AAEi07nuwAG92q4gqrEcnzZJ_WT8dp9-ieA";
  const SECOND_BOT_CHAT_ID = "4522204925"; // –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞

  const apiUrl = `https://api.telegram.org/bot${SECOND_BOT_TOKEN}/sendMessage`;

  try {
    const message = `
üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*
1Ô∏è‚É£ *–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è:* ${summary.goal || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
2Ô∏è‚É£ *–ö–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:* ${summary.grade || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
3Ô∏è‚É£ *–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:* ${summary.knowledge || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
4Ô∏è‚É£ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* ${summary.date || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
5Ô∏è‚É£ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* ${summary.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
    `;

    const response = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: SECOND_BOT_CHAT_ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã
        text: message,
        parse_mode: "Markdown",
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${response.status} - ${errorText}`);
    }

    console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É!");
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç: ${error.message}`);
  }
};

/// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —ç—Ç–∞–ø–æ–≤ –¥–∏–∞–ª–æ–≥–∞
const askNextQuestion = async (chatId, bot) => {
  const user = userState[chatId] || { stage: 0, data: {}, askedPhone: false };
  userState[chatId] = user;

  const optionalQuestions = dialogStages.questions.filter(
    (q) => q.stage !== "–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"
  );

  try {
    if (!user.askedPhone && user.stage >= optionalQuestions.length) {
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneQuestion = dialogStages.questions.find(
        (q) => q.stage === "–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"
      );
      await sendMessageWithCheck(chatId, phoneQuestion.text);
      user.askedPhone = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω
      logger.info(`–í–æ–ø—Ä–æ—Å –ø—Ä–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–¥–∞–Ω –¥–ª—è chatId ${chatId}`);
    } else if (user.stage < optionalQuestions.length) {
      // –ó–∞–¥–∞—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
      const question = optionalQuestions[user.stage];
      await sendMessageWithCheck(chatId, question.text);
      user.stage += 1; // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø
      logger.info(`–≠—Ç–∞–ø –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è chatId ${chatId}: ${user.stage}`);
    } else {
      // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã
      const summary = {
        goal: user.data.goal || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        grade: user.data.grade || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        knowledge: user.data.knowledge || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        date: user.data.date || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        phone: user.data.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      };

      logger.info(`–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã –¥–ª—è chatId ${chatId}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ.`);
      await sendSummaryToSecondBot(summary);

      await sendMessageWithCheck(
        chatId,
        "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
      );
      delete userState[chatId]; // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ askNextQuestion –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

const saveUserMessage = async (chatId, message) => {
  try {
    const db = getDb();
    const collection = db.collection('userMessages');

    if (!chatId || !message) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
    }

    const existingMessage = await collection.findOne({
      userId: chatId,
      "messages.content": message,
    });

    if (existingMessage) {
      logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è chatId ${chatId}: ${message}`);
      return; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    }

    await collection.updateOne(
      { userId: chatId },
      { $push: { messages: { content: message, timestamp: new Date() } } },
      { upsert: true }
    );
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ "${message}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MongoDB –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

app.use(bodyParser.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.post('/webhook', (req, res) => {
  logger.info(`–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: ${JSON.stringify(req.body)}`);
  bot.processUpdate(req.body); // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –±–æ—Ç—É
  res.sendStatus(200); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ GET
app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

app.get('/webhook', (req, res) => {
  res.send('Webhook –æ–∂–∏–¥–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram.');
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  try {
    // –í–∞—à –∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await connectToMongoDB();
    logger.info("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.");

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`);
    process.exit(1);
  }
})();

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ–ª–ª–æ—É-–∞–ø–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
const handleFollowUps = async (chatId) => {
  try {
    const db = getDb();
    const collection = db.collection('userMessages');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const userMessages = await collection.findOne({ userId: chatId });
    const hasPhoneNumber = userMessages?.messages.some((message) =>
      /\+?\d{10,15}/.test(message.content)
    );

    if (!hasPhoneNumber) {
      await sendFollowUps(bot, chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ–ª–ª–æ—É-–∞–ø—ã
      logger.info(`–§–æ–ª–ª–æ—É-–∞–ø—ã –∑–∞–ø—É—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–æ–ª–ª–æ—É-–∞–ø–æ–≤ –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø–µ—á–∞—Ç–∞–Ω–∏—è" (–æ—Ç 3 –¥–æ 6 —Å–µ–∫—É–Ω–¥)
function getThinkingDelay() {
  return Math.floor(Math.random() * (6000 - 3000 + 1)) + 3000; // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ "–ø–µ—á–∞—Ç–∞–Ω–∏–µ–º"
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ "–ø–µ—á–∞—Ç–∞–Ω–∏—è" –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (–¥–æ 20 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º)
function calculateTypingTime(text) {
  const words = text.split(' ').length;
  const baseTime = 3; // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  return Math.min(baseTime + words * 0.7, 20) * 1000; // –°–∫–æ—Ä–æ—Å—Ç—å: 0.7 —Å–µ–∫/—Å–ª–æ–≤–æ, –º–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const cleanupOldMessages = async (chatId) => {
  try {
    const db = getDb();
    const collection = db.collection('userMessages');
    const cutoffDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥

    if (!chatId) {
      throw new Error('chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }

    await collection.updateOne(
      { userId: chatId },
      { $pull: { messages: { timestamp: { $lt: cutoffDate } } } }
    );
    logger.info(`–°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat?.id;

  if (!chatId) {
    logger.error('chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', JSON.stringify(msg, null, 2));
    return;
  }

  const welcomeMessage =
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É 'Rist'. –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å –ø–æ–º–æ—â—å—é –∑–∞–Ω—è—Ç–∏–π? –ù–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã, –ø–æ–≤—ã—Å–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.";

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
      await bot.sendMessage(chatId, welcomeMessage);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userState[chatId] = { stage: 0, data: {} };

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
      await askNextQuestion(chatId, bot);

      logger.info(`–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    }, 4000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 4 —Å–µ–∫—É–Ω–¥—ã
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat?.id;

  if (!chatId) {
    logger.error("chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:", JSON.stringify(msg, null, 2));
    return;
  }

  if (msg.text?.startsWith("/")) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  }

  try {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å
    const user = userState[chatId] || { stage: 0, data: {}, askedPhone: false };
    userState[chatId] = user;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userMessage = msg.text;
    await saveUserMessage(chatId, userMessage);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
    switch (user.stage) {
      case 0:
        user.data.goal = userMessage;
        break;
      case 1:
        user.data.grade = userMessage;
        break;
      case 2:
        user.data.knowledge = userMessage;
        break;
      case 3:
        user.data.date = userMessage;
        break;
      case 4:
        if (!user.askedPhone) {
          user.data.phone = userMessage;
          user.askedPhone = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–¥–∞–Ω
        }
        break;
      default:
        logger.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø –¥–ª—è chatId ${chatId}: ${user.stage}`);
        return;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await cleanupOldMessages(chatId);
    logger.info(`–°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –æ—á–∏—â–µ–Ω—ã.`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    if (user.stage >= 4 && user.askedPhone) {
      const summary = {
        goal: user.data.goal || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        grade: user.data.grade || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        knowledge: user.data.knowledge || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        date: user.data.date || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        phone: user.data.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      };

      logger.info(`–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è chatId ${chatId}.`);
      await sendSummaryToSecondBot(summary);

      await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.");
      delete userState[chatId]; // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return;
    }

    // –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–Ω–∏—è" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞
    bot.sendChatAction(chatId, "typing");
    await new Promise((resolve) => setTimeout(resolve, getThinkingDelay())); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hugging Face API
    const stage = user.stage;
    const response = await generateResponse(stage, user.objection);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ MongoDB
    try {
      const db = getDb();
      const collection = db.collection("userContext");
      userContext[chatId] = userContext[chatId] || [];
      userContext[chatId].push({ role: "assistant", content: response });
      await collection.updateOne(
        { userId: chatId },
        { $set: { context: userContext[chatId] } },
        { upsert: true }
      );
      logger.info(`–û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ MongoDB.`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ MongoDB –¥–ª—è chatId ${chatId}: ${error.message}`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º "–ø–µ—á–∞—Ç–∞–Ω–∏—è"
    bot.sendChatAction(chatId, "typing");
    await new Promise((resolve) => setTimeout(resolve, calculateTypingTime(response)));
    await bot.sendMessage(chatId, response);
    logger.info(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: "${response}"`);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    user.stage += 1;

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${error.message}`);
    try {
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } catch (sendError) {
      logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è chatId ${chatId}: ${sendError.message}`);
    }
  }
});

