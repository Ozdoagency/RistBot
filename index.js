import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import bodyParser from 'body-parser';
import winston from 'winston';
import fetch from 'node-fetch';
import { connectToMongoDB, getDb } from './mongodb.js'; // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB
import dialogStages from './prompts/dialogStages.js'; // –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot.log' }),
  ],
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || "7733244277:AAFa1YylutZKqaEw0LjBTDRKxZymWz91LPs";
const WEBHOOK_URL = process.env.WEBHOOK_URL || "https://ristbot.onrender.com";
const HF_ACCESS_TOKEN = process.env.HF_ACCESS_TOKEN || "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";
const HF_MODEL = "DeepPavlov/rubert-base-cased-conversational"; // –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
const HF_API_URL = `https://api-inference.huggingface.co/models/${HF_MODEL}`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_TOKEN);
bot.setWebHook(`${WEBHOOK_URL}/bot${TELEGRAM_TOKEN}`);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userState = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Hugging Face API
async function sendToHuggingFace(prompt) {
  try {
    const response = await fetch(HF_API_URL, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${HF_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: prompt,
        parameters: { max_length: 150, temperature: 0.7 },
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Hugging Face API Error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return data.generated_text || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Hugging Face API: ${error.message}`);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.';
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
const sendMessageWithCheck = async (chatId, message) => {
  try {
    await bot.sendMessage(chatId, message);
    logger.info(`Message sent to chatId ${chatId}: ${message}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat?.id;
  const welcomeMessage = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É 'Rist'. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?";

  if (!chatId) {
    logger.error('chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', JSON.stringify(msg, null, 2));
    return;
  }

  try {
    logger.info(`–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId ${chatId}`);
    if (!userState[chatId]) {
      await sendMessageWithCheck(chatId, welcomeMessage);
      userState[chatId] = { stage: 0, data: {}, askedPhone: false };
      await askNextQuestion(chatId);
    } else {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å chatId ${chatId} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.`);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat?.id;
  const welcomeMessage = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É 'Rist'. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?";

  if (!chatId) {
    logger.error('chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', JSON.stringify(msg, null, 2));
    return;
  }

  try {
    logger.info(`–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId ${chatId}`);

    if (!userState[chatId]) {
      await sendMessageWithCheck(chatId, welcomeMessage);
      userState[chatId] = { stage: 0, data: {}, askedPhone: false };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      try {
        await askNextQuestion(chatId);
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –≤ askNextQuestion –¥–ª—è chatId ${chatId}: ${error.message}`);
      }
    } else {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å chatId ${chatId} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.`);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const askNextQuestion = async (chatId) => {
  const user = userState[chatId] || { stage: 0, data: {}, askedPhone: false };
  userState[chatId] = user;

  try {
    const question = dialogStages?.questions[user.stage];
    if (question) {
      await sendMessageWithCheck(chatId, question.text);
      user.stage += 1;
    } else {
      logger.info(`–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã –¥–ª—è chatId ${chatId}.`);
      await sendMessageWithCheck(chatId, '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.');
      delete userState[chatId];
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ askNextQuestion –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ Express-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();
app.use(bodyParser.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook –æ—Ç Telegram
app.post('/webhook', (req, res) => {
  logger.info(`–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: ${JSON.stringify(req.body)}`);
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  try {
    await connectToMongoDB();
    logger.info('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    app.listen(process.env.PORT || 3000, () => {
      logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3000}`);
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: ${error.message}`);
    process.exit(1);
  }
})();
