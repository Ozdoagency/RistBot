// –ò–º–ø–æ—Ä—Ç—ã
import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import bodyParser from 'body-parser';
import winston from 'winston';
import { GoogleGenerativeAI } from "@google/generative-ai";

import basePrompt from './prompts/basePrompt.js';
import dialogStages from './prompts/dialogStages.js';
import generalQuestions from './prompts/generalQuestions.js';
import objectionHandling from './prompts/objectionHandling.js';
import pricing from './prompts/pricing.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  TELEGRAM_TOKEN: process.env.TELEGRAM_TOKEN || '–í–∞—à_Telegram_Token',
  WEBHOOK_URL: process.env.WEBHOOK_URL || '–í–∞—à_Webhook_Url',
  GEMINI_API_KEY: process.env.GEMINI_API_KEY || '–í–∞—à_Gemini_API_Key',
  GEMINI_API_URL: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',
  MAX_TELEGRAM_MESSAGE_LENGTH: 4096,
  ADMIN_ID: process.env.ADMIN_ID || null,
  REQUEST_LIMIT: 5,
  REQUEST_WINDOW: 60000,
  PORT: process.env.PORT || 3000,
  GROUP_CHAT_ID: '-4522204925',
  BOT_TOKEN: '2111920825:AAGVeO134IP43jQdU9GNQRJw0gUcJPocqaU',
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GoogleGenerativeAI
const genAI = new GoogleGenerativeAI(config.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
const bot = new TelegramBot(config.TELEGRAM_TOKEN);
bot.setWebHook(`${config.WEBHOOK_URL}/bot${config.TELEGRAM_TOKEN}`);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Winston
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}]: ${message}`)
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs.log', maxsize: 5 * 1024 * 1024, maxFiles: 5 }),
  ],
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const userHistories = {};
const userRequestTimestamps = {};
let userStages = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// **–§—É–Ω–∫—Ü–∏—è sendToGemini**
async function sendToGemini(prompt, chatId) {
  try {
    logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API –æ—Ç chatId ${chatId}: "${prompt}"`);
    const result = await model.generateContent(prompt);

    logger.info(`–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API –¥–ª—è chatId ${chatId}: ${JSON.stringify(result)}`);

    if (result.response && result.response.candidates && result.response.candidates.length > 0) {
      const reply = result.response.candidates[0].content.parts[0].text || '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
      logger.info(`–û—Ç–≤–µ—Ç –æ—Ç Gemini API –¥–ª—è chatId ${chatId}: "${reply}"`);
      return reply;
    } else {
      logger.warn(`Gemini API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è chatId ${chatId}.`);
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. Gemini API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç.';
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ Gemini API –¥–ª—è chatId ${chatId}: ${error.message}`);
    throw new Error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
  }
}

// **–§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏**
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// **–§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π**
async function sendTypingMessage(chatId, text) {
  if (!text || text.trim() === '') return;

  const typingDelay = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—á–∞—Ç–∏
  const typingDuration = Math.min(text.length * 50, 5000); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)

  await bot.sendChatAction(chatId, 'typing');
  await delay(typingDelay);

  const MAX_LENGTH = config.MAX_TELEGRAM_MESSAGE_LENGTH;
  const messages = [];

  for (let i = 0; i < text.length; i += MAX_LENGTH) {
    messages.push(text.substring(i, i + MAX_LENGTH));
  }

  for (const message of messages) {
    await bot.sendChatAction(chatId, 'typing');
    await delay(typingDuration);
    await bot.sendMessage(chatId, message);
  }
}

// **–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π**
async function sendMessage(chatId, text) {
  if (!text || text.trim() === '') return;

  const MAX_LENGTH = config.MAX_TELEGRAM_MESSAGE_LENGTH;
  const messages = [];

  for (let i = 0; i < text.length; i += MAX_LENGTH) {
    messages.push(text.substring(i, i + MAX_LENGTH));
  }

  for (const message of messages) {
    await bot.sendMessage(chatId, message);
  }
}

// **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤**
function containsNegativeWords(text) {
  const negativeWords = ["—É—Ö—É–¥—à–∏–ª–∏—Å—å", "–ø—Ä–æ–±–ª–µ–º—ã", "–ø—Ä–æ–±–µ–ª—ã", "—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏", "—Å–ª–æ–∂–Ω–æ—Å—Ç–∏", "–ø–µ—á–∞–ª—å–Ω–æ"];
  return negativeWords.some(word => text.toLowerCase().includes(word));
}

// **–§—É–Ω–∫—Ü–∏—è ÔøΩÔøΩ–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º**
function getNextQuestionWithEmotion(stage, followUp, userMessage) {
  const positiveEmotions = [
    "–û—Ç–ª–∏—á–Ω–æ! üòä",
    "–ü–æ–Ω—è–ª –≤–∞—Å! üëç",
    "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üåü",
    "–•–æ—Ä–æ—à–æ! üëå",
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üòÉ"
  ];
  const neutralEmotions = [
    "–ü–æ–Ω—è–ª –≤–∞—Å.",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
    "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∏–º.",
    "–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ.",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç."
  ];
  const sympatheticEmotions = [
    "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ.",
    "–°–æ–∂–∞–ª–µ—é, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.",
    "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –≤–∞–∂–Ω–æ.",
    "–°–æ–∂–∞–ª–µ—é, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.",
    "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ."
  ];

  let emotions;
  if (containsNegativeWords(userMessage)) {
    emotions = sympatheticEmotions;
  } else {
    emotions = positiveEmotions;
  }

  const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];
  const randomFollowUp = followUp[Math.floor(Math.random() * followUp.length)];
  const randomText = Array.isArray(stage.text) ? stage.text[Math.floor(Math.random() * stage.text.length)] : stage.text;
  return `${randomEmotion} ${randomFollowUp} ${randomText}`;
}

// **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start**
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  logger.info(`–ü–æ–ª—ÉÔøΩÔøΩ–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chatId: ${chatId}`);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userHistories[chatId] = [];
  userRequestTimestamps[chatId] = { count: 0, timestamp: 0 };
  userStages[chatId] = 0; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø

  const firstName = msg.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const welcomeMessage = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É "Rist". –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!`;

  logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chatId: ${chatId}`);
  await sendTypingMessage(chatId, welcomeMessage);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const prompt = generatePrompt(welcomeMessage, chatId);
  const aiResponse = await sendToGemini(prompt, chatId);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
  userHistories[chatId].push({ response: welcomeMessage, reply: aiResponse });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await sendTypingMessage(chatId, aiResponse);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const firstStage = dialogStages.questions[userStages[chatId]];
  logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è chatId: ${chatId}`);
  await sendTypingMessage(chatId, firstStage.text);
});

// **–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø—É**
async function sendCollectedDataToGroup(chatId) {
  const userHistory = userHistories[chatId];
  if (!userHistory) return;

  const collectedData = userHistory.map(entry => `${entry.stage}: ${entry.response}`).join('\n');
  const message = `–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n${collectedData}`;

  try {
    const groupBot = new TelegramBot(config.BOT_TOKEN);
    await groupBot.sendMessage(config.GROUP_CHAT_ID, message);
    logger.info(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –¥–ª—è chatId: ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø—É –¥–ª—è chatId ${chatId}: ${error.message}`);
  }
}

// **–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Gemini API**
function generatePrompt(userMessage, chatId) {
  const userHistory = userHistories[chatId] || [];
  const context = userHistory.map(entry => `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${entry.response}\n–ò–ò: ${entry.reply}`).join('\n');
  return `${context}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userMessage}\n–ò–ò:`;
}

// **–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤**
async function handleLongResponse(chatId, response) {
  const MAX_LENGTH = config.MAX_TELEGRAM_MESSAGE_LENGTH;
  const messages = [];

  for (let i = 0; i < response.length; i += MAX_LENGTH) {
    messages.push(response.substring(i, i + MAX_LENGTH));
  }

  for (const message of messages) {
    await sendTypingMessage(chatId, message);
  }
}

// **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  logger.info(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chatId: ${chatId}, —Ç–µ–∫—Å—Ç: ${userMessage}`);

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (userMessage.startsWith('/')) return;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞
    if (userStages[chatId] === undefined) {
      userStages[chatId] = 0; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
    }

    const currentStage = dialogStages.questions[userStages[chatId]];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Gemini API
    const prompt = generatePrompt(userMessage, chatId);
    const aiResponse = await sendToGemini(prompt, chatId);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    userHistories[chatId] = userHistories[chatId] || [];
    userHistories[chatId].push({ response: userMessage, reply: aiResponse });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (aiResponse.length > config.MAX_TELEGRAM_MESSAGE_LENGTH) {
      await handleLongResponse(chatId, aiResponse);
    } else {
      await sendTypingMessage(chatId, aiResponse);
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    userStages[chatId]++;
    if (userStages[chatId] < dialogStages.questions.length) {
      const nextStage = dialogStages.questions[userStages[chatId]];
      const nextQuestion = nextStage.stage === "–¢–µ–º—ã" ? nextStage.text(userHistories[chatId][1].response) : nextStage.text;
      const nextQuestionWithEmotion = getNextQuestionWithEmotion({ text: nextQuestion }, currentStage.followUp, userMessage);
      logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è chatId: ${chatId}`);
      await sendTypingMessage(chatId, nextQuestionWithEmotion);
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
      delete userStages[chatId];
      logger.info(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è chatId: ${chatId}`);
      await sendTypingMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ!");

      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      await sendTypingMessage(chatId, "–°–µ–π—á–∞—Å —É—Ç–æ—á–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂—É –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üòä");

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –≥—Ä—É–ø–ø—É
      await sendCollectedDataToGroup(chatId);
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç chatId ${chatId}: ${error.message}`);
    await sendTypingMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
  }
});

// **Express-—Å–µ—Ä–≤–µ—Ä**
const app = express();
app.use(bodyParser.json());

app.post(`/bot${config.TELEGRAM_TOKEN}`, (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ Webhook: ${error.message}`);
    res.sendStatus(500);
  }
});

app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

app.listen(config.PORT, () => {
  logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.PORT}`);
});
