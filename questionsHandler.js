import dialogStages from './prompts.js';
import { sendSummaryToSecondBot } from './summaryHandler.js';
import { sendMessageWithCheck } from './messageUtils.js';
import logger from './logger.js';

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
const sendNotificationToGroup = async (bot, summary) => {
  try {
    const GROUP_CHAT_ID = '-4522204925'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –Ω–∞–ø—Ä—è–º—É—é
    
    const groupMessage = `üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n` +
      `–¶–µ–ª—å: ${summary.goal}\n` +
      `–ö–ª–∞—Å—Å: ${summary.grade}\n` +
      `–¢–µ–º—ã: ${summary.knowledge}\n` +
      `–í—Ä–µ–º—è: ${summary.date}\n` +
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${summary.phone}`;

    const result = await bot.sendMessage(GROUP_CHAT_ID, groupMessage);
    logger.info(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: ${GROUP_CHAT_ID}`);
    return result;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: ${error.message}`);
    throw error;
  }
};

const generateEmotionalJoinText = (context) => {
  const responses = [
    "–û—Ç–ª–∏—á–Ω–æ! üòä",
    "–ó–¥–æ—Ä–æ–≤–æ! üëç",
    "–ü–æ–Ω—è–ª –≤–∞—Å! üëå",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! üåü",
  ];
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  return responses[Math.floor(Math.random() * responses.length)];
};

const sendEmotionalJoinText = async (bot, chatId, context) => {
  const joinText = generateEmotionalJoinText(context);
  await sendMessageWithCheck(bot, chatId, joinText);
};

export const askNextQuestion = async (chatId, userState, bot, userMessage) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userState[chatId]) {
      userState[chatId] = {
        stage: 0,
        data: {
          goal: null,
          grade: null,
          knowledge: null,
          date: null,
          phone: null
        },
        askedPhone: false
      };
    }

    const user = userState[chatId];
    const currentStage = dialogStages.questions[user.stage];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    if (userMessage && currentStage) {
      switch (currentStage.stage) {
        case "–¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è":
          user.data.goal = userMessage;
          break;
        case "–ö–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞":
          user.data.grade = userMessage;
          break;
        case "–¢–µ–º—ã":
          user.data.knowledge = userMessage;
          break;
        case "–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è":
          user.data.date = userMessage;
          break;
        case "–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏":
          user.data.phone = userMessage;
          user.askedPhone = true;
          break;
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
    if (currentStage && currentStage.joinText) {
      await sendMessageWithCheck(bot, chatId, currentStage.joinText);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await sendEmotionalJoinText(bot, chatId, userMessage);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    user.stage++;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    const nextStage = dialogStages.questions[user.stage];

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–æ–ø—Ä–æ—Å
    if (nextStage) {
      await sendMessageWithCheck(bot, chatId, nextStage.text);
      logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å —ç—Ç–∞–ø–∞ ${nextStage.stage} –¥–ª—è chatId ${chatId}`);
    } else {
      // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const summary = {
        goal: user.data.goal || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        grade: user.data.grade || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        knowledge: user.data.knowledge || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        date: user.data.date || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        phone: user.data.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      try {
        await sendNotificationToGroup(bot, summary);
      } catch (notificationError) {
        logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: ${notificationError.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –Ω–µ —É–¥–∞–ª–∞—Å—å
      }

      await sendSummaryToSecondBot(bot, summary);
      await sendMessageWithCheck(bot, chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. üòä");
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      delete userState[chatId];
    }

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ askNextQuestion –¥–ª—è chatId ${chatId}: ${error.message}`);
    throw error;
  }
};
